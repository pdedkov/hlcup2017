// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package main

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson89aae3efDecodeBitbucketOrgPdedkovHlcup(in *jlexer.Lexer, out *Visit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "user":
			out.User = int(in.Int())
		case "location":
			out.Location = int(in.Int())
		case "visited_at":
			out.Visited = int(in.Int())
		case "mark":
			out.Mark = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89aae3efEncodeBitbucketOrgPdedkovHlcup(out *jwriter.Writer, in Visit) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.Int(int(in.ID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"user\":")
	out.Int(int(in.User))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"location\":")
	out.Int(int(in.Location))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"visited_at\":")
	out.Int(int(in.Visited))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"mark\":")
	out.Int(int(in.Mark))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Visit) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson89aae3efEncodeBitbucketOrgPdedkovHlcup(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Visit) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson89aae3efEncodeBitbucketOrgPdedkovHlcup(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Visit) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson89aae3efDecodeBitbucketOrgPdedkovHlcup(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Visit) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson89aae3efDecodeBitbucketOrgPdedkovHlcup(l, v)
}
func easyjson89aae3efDecodeBitbucketOrgPdedkovHlcup1(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "first_name":
			out.FirstName = string(in.String())
		case "last_name":
			out.LastName = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "gender":
			out.Gender = string(in.String())
		case "birth_date":
			out.Birthday = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89aae3efEncodeBitbucketOrgPdedkovHlcup1(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.Int(int(in.ID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"first_name\":")
	out.String(string(in.FirstName))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"last_name\":")
	out.String(string(in.LastName))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"email\":")
	out.String(string(in.Email))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"gender\":")
	out.String(string(in.Gender))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"birth_date\":")
	out.Int64(int64(in.Birthday))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson89aae3efEncodeBitbucketOrgPdedkovHlcup1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson89aae3efEncodeBitbucketOrgPdedkovHlcup1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson89aae3efDecodeBitbucketOrgPdedkovHlcup1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson89aae3efDecodeBitbucketOrgPdedkovHlcup1(l, v)
}
func easyjson89aae3efDecodeBitbucketOrgPdedkovHlcup2(in *jlexer.Lexer, out *ShortVisits) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "visits":
			if in.IsNull() {
				in.Skip()
				out.Visits = nil
			} else {
				in.Delim('[')
				if out.Visits == nil {
					if !in.IsDelim(']') {
						out.Visits = make([]ShortVisit, 0, 2)
					} else {
						out.Visits = []ShortVisit{}
					}
				} else {
					out.Visits = (out.Visits)[:0]
				}
				for !in.IsDelim(']') {
					var v1 ShortVisit
					easyjson89aae3efDecodeBitbucketOrgPdedkovHlcup3(in, &v1)
					out.Visits = append(out.Visits, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89aae3efEncodeBitbucketOrgPdedkovHlcup2(out *jwriter.Writer, in ShortVisits) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"visits\":")
	if in.Visits == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in.Visits {
			if v2 > 0 {
				out.RawByte(',')
			}
			easyjson89aae3efEncodeBitbucketOrgPdedkovHlcup3(out, v3)
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ShortVisits) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson89aae3efEncodeBitbucketOrgPdedkovHlcup2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ShortVisits) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson89aae3efEncodeBitbucketOrgPdedkovHlcup2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ShortVisits) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson89aae3efDecodeBitbucketOrgPdedkovHlcup2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ShortVisits) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson89aae3efDecodeBitbucketOrgPdedkovHlcup2(l, v)
}
func easyjson89aae3efDecodeBitbucketOrgPdedkovHlcup3(in *jlexer.Lexer, out *ShortVisit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "mark":
			out.Mark = int(in.Int())
		case "visited_at":
			out.Visited = int(in.Int())
		case "place":
			out.Place = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89aae3efEncodeBitbucketOrgPdedkovHlcup3(out *jwriter.Writer, in ShortVisit) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"mark\":")
	out.Int(int(in.Mark))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"visited_at\":")
	out.Int(int(in.Visited))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"place\":")
	out.String(string(in.Place))
	out.RawByte('}')
}
func easyjson89aae3efDecodeBitbucketOrgPdedkovHlcup4(in *jlexer.Lexer, out *Location) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "distance":
			out.Distance = int(in.Int())
		case "country":
			out.Country = string(in.String())
		case "city":
			out.City = string(in.String())
		case "place":
			out.Place = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89aae3efEncodeBitbucketOrgPdedkovHlcup4(out *jwriter.Writer, in Location) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.Int(int(in.ID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"distance\":")
	out.Int(int(in.Distance))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"country\":")
	out.String(string(in.Country))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"city\":")
	out.String(string(in.City))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"place\":")
	out.String(string(in.Place))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Location) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson89aae3efEncodeBitbucketOrgPdedkovHlcup4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Location) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson89aae3efEncodeBitbucketOrgPdedkovHlcup4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Location) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson89aae3efDecodeBitbucketOrgPdedkovHlcup4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Location) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson89aae3efDecodeBitbucketOrgPdedkovHlcup4(l, v)
}
func easyjson89aae3efDecodeBitbucketOrgPdedkovHlcup5(in *jlexer.Lexer, out *Avg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "avg":
			out.Avg = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89aae3efEncodeBitbucketOrgPdedkovHlcup5(out *jwriter.Writer, in Avg) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"avg\":")
	out.Float64(float64(in.Avg))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Avg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson89aae3efEncodeBitbucketOrgPdedkovHlcup5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Avg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson89aae3efEncodeBitbucketOrgPdedkovHlcup5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Avg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson89aae3efDecodeBitbucketOrgPdedkovHlcup5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Avg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson89aae3efDecodeBitbucketOrgPdedkovHlcup5(l, v)
}
